{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","cn","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","initialTodos","App","useState","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","setTodos","isEmpty","trim","length","action","method","onSubmit","e","preventDefault","posts","newTodo","Math","max","post","currentTodos","htmlFor","type","value","placeholder","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23c7bfa6.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: React.FC<Props> = ({\n  user: {\n    email,\n    name,\n  },\n}) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${email}`}\n    >\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    id, title, completed, user,\n  },\n}) => {\n  return (\n    <li\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </li>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </ul>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\n\nfunction getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n\nfunction getNewPostId(posts: Todo[]) {\n  return Math.max(...posts.map(post => post.id)) + 1;\n}\n\nconst initialTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const isEmpty = !title.trim().length;\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+e.target.value);\n    setHasUserIdError(false);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    setHasTitleError(!title || isEmpty);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId || isEmpty) {\n      return;\n    }\n\n    const newTodo = {\n      id: getNewPostId(todos),\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    };\n\n    setTodos((currentTodos) => [...currentTodos, newTodo]);\n\n    setTitle('');\n    setUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"post-title\">Title: </label>\n          <input\n            id=\"post-title\"\n            type=\"text\"\n            value={title}\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            onChange={handleTitleChange}\n          />\n\n          {hasTitleError && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"post-id\">User: </label>\n          <select\n            id=\"post-id\"\n            value={userId}\n            data-cy=\"userSelect\"\n            onChange={handleUserIdChange}\n          >\n            <option value=\"0\">\n              Choose a user\n            </option>\n\n            {usersFromServer.map(({ id, name }) => (\n              <option\n                key={id}\n                value={id}\n              >\n                {name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}